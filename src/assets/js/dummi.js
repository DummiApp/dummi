/*
  [x] view
    [x] outputType
    [x] title
    [x] amount
    [x] valuePool
      [x] show options for datapool
    [x] value types
    [ ] presets
    [x] reset
    [x] options
    [x] download
  [ ] generators
    [ ] Listed in the Generators section
  [x] the master generator
    [x] generates the output

  FIXME: fix CSV wrapping
*/

function byId(id) {
  return document.getElementById(id);
}

function getIndex(list, element) {
  return Array.prototype.indexOf.call(list, element);
}

function forEach(list, callback) {
  for (var i = list.length; i--;) {
    callback(list[i], i);
  }
}

var els = {
  arrayName: byId('arrayName'),
  objectNumber: byId('objectNumber'),
  valuePool: byId('valuePoolSelection'),
  valueType: byId('valueTypeSelection'),
  addValue: byId('addValue'),
  presetSelector: byId('presetSelector'),
  valueWrapper: byId('valueWrapper'),
  resetButton: byId('btnReset'),
  helpLink: byId('helpLink'),
  help: byId('help'),
  closeHelp: byId('closeLink'),
  codeField: byId('codeField'),
  downloadLabel: byId('path--field'),
  // download: byId('copyButton'),
  downloadJSON: byId('downloadJSON'),
  downloadCSV: byId('downloadCSV'),
  dataLink: byId('downloadData'),
  editIcon: document.querySelector('.edit'),
  removeIcon: document.querySelector('.remove')
}

var uniqueHelper = 0;

var valueOptions = {
  fullName: {
    title: 'gender',
    options: [{
      title: 'Both',
      value: 'both'
    }, {
      title: 'Male',
      value: 'male'
    }, {
      title: 'Female',
      value: 'female'
    }]
  },
  age: {
    title: 'boundries',
    options: [{
      title: 'Child',
      value: 'child'
    }, {
      title: 'Teen',
      value: 'teen'
    }, {
      title: 'Adult',
      value: 'adult'
    }, {
      title: 'Senior',
      value: 'senior'
    }]
  },
  phone: {
    title: 'country',
    options: [{
      title: 'US',
      value: 'us'
    }, {
      title: 'UK',
      value: 'uk'
    }, {
      title: 'DE',
      value: 'de'
    }]
  },
  rating: {
    title: 'out of options',
    options: [{
      title: 'Out of 5',
      value: 5
    }, {
      title: 'Out of 10',
      value: 10
    }]
  },
  startTimes: {
    title: 'time of day',
    options: [{
      title: 'Any Time',
      value: 'all'
    }, {
      title: 'Evening',
      value: 'evening'
    }, {
      title: 'Midday',
      value: 'midday'
    }]
  },
  datePublished: {
    title: 'date format',
    options: [{
      title: 'mm/dd/yyyy',
      value: 'USDate'
    }, {
      title: 'dd/mm/yyyy',
      value: 'nonUSDate'
    }]
  },
  dateCreated: {
    title: 'date format',
    options: [{
      title: 'mm/dd/yyyy',
      value: 'USDate'
    }, {
      title: 'dd/mm/yyyy',
      value: 'nonUSDate'
    }]
  },
  author: {
    title: 'name',
    options: [{
      title: 'Username',
      value: 'username'
    }, {
      title: 'Full Name',
      value: 'fullName'
    }]
  },
  price: {
    title: 'currency',
    options: [{
      title: 'Dollar',
      value: '$'
    }, {
      title: 'GBP',
      value: '£'
    }, {
      title: 'Euro',
      value: '€'
    }]
  },
  extension: {
    title: 'types',
    options: [{
      title: 'All',
      value: 'all'
    }, {
      title: 'Images',
      value: 'img'
    }, {
      title: 'Code',
      value: 'code'
    }]
  },
  name: {
    title: 'options',
    options: [{
      title: 'Only Name',
      value: 'onlyName'
    }, {
      title: 'Name and Extension',
      value: 'alsoExtension'
    }]
  }
}

var valuePools = {
  users: ['fullName', 'firstName', 'lastName', 'gender', 'age', 'username', 'email', 'emailVerified', 'phone', 'twitterHandle'],
  articles: ['title', 'subTitle', 'datePublished', 'author', 'snippet', 'text', 'rating', 'comments'],
  blog: ['title', 'author', 'datePublished', 'post', 'likes', 'comments'],
  books: ['title', 'description', 'author', 'datePublished', 'yearPublished', 'price', 'rating', 'reviews'],
  comments: ['author', 'datePublished', 'timePublished', 'comment', 'likes'],
  files: ['name', 'extension', 'dateCreated']
};

var presets = {
  users: ['firstName', 'lastName', 'gender', 'age', 'username', 'email', 'phone'],
  articles: ['title', 'subTitle', 'datePublished', 'author', 'text', 'rating', 'comments'],
  blog: ['title', 'author', 'datePublished', 'post', 'likes', 'comments'],
  books: ['title', 'description', 'author', 'datePublished', 'price', 'rating', 'reviews'],
  comments: ['author', 'datePublished', 'timePublished', 'comment', 'likes'],
  files: ['name', 'extension', 'dateCreated']
}

var consistentValues = {
  // Generated by newConsistentValues()
};

var viewOptions = {
  valuePool: els.valuePool.value
};

var generateOptions = {
  type: 'tableOutput',
  title: els.arrayName.value || 'dummi-data',
  amount: els.objectNumber.value || 2
};

var schema = [
  {
    type: 'fullName',
    option: 'both',
    key: 'fullName'
  }
];

var defaults = {
  types: els.valueWrapper.innerHTML,
  arrayNamePlaceholder: 'Array Name', // els.arrayName.placeholder
  editIcon: els.editIcon.innerHTML,
  removeIcon: els.removeIcon.innerHTML
}

/*  Generation List
    Structure:
      Users [ ] - timezone, birthday, etc
      General [ ] - numbers, dates, times, countries / cities, etc
      Articles [x] - title, subtitle, author, datePublished, etc
      Blog Posts [x] - title, author, datePublished, likes, commentAmount, etc
      Books [x] - title, description, author, datePublished, yearPublished, price, etc
      Comments [x] - author, datePublished, timePublished, comment, likes, etc
      E-Commerce Items [ ] - name, description, price, etc
      Files [x] - name, extension, dateCreated, dateEdited, etc
      Flights [ ] - etc
      Movies [ ] - name, description, datePublished, MMPArating, runtime, startTimes, rating, etc
      ---
      newConsistentValues()
*/

// Users
function generateFullName(gender) {
  return consistentValues.fullName;
}

function generateFirstName() {
  return generateFullName().split(' ')[0];
}

function generateLastName() {
  return generateFullName().split(' ')[1];
}

function generateGender() {
  return consistentValues.gender;
}

function generateAge(group) {
  group = group || 'adult';

  var groups = {
    child: consistentValues.childAge,
    teen: consistentValues.teenAge,
    adult: consistentValues.adultAge,
    senior: consistentValues.seniorAge
  }

  return groups[group];
}

function generateUsername() {
  return generateFirstName()[0].toLowerCase() + generateLastName();
}

function generateEmail() {
  return generateUsername() + '@example.com';
}

function generateEmailVerified() {
  return consistentValues.emailVerified;
}

function generatePhoneNumber(country) {
  if (country === 'de') {
      var dePhoneOptions = ['0150', '0151', '0160', '0170', '0171', '0175', '0152', '0162', '0172', '0173', '0174', '0155', '0163', '0177', '0178', '0159', '0176', '0179', '0161', '0167', '0164', '0168', '0169'];
      var dePhone = dePhoneOptions[chance.integer({min: 1, max: dePhoneOptions.length-1})] + ' ' + chance.integer({min: 1000000, max: 9999999});
      return dePhone;
  }
  return chance.phone({ country: country, mobile: true });
}

function generateTwitterHandle() {
  return '@' + generateUsername();
}

// Articles

function capitalize(text) {
  return text.replace(/\w\S*/g, function(word) {
    return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();
  });
}

function replaceAt(text, index, character) {
  return text.substr(0, index) + character + text.substr(index + character.length);
}

function doubleUp(number) {
  if(number < 10){
    return '0' + number;
  }else{
    return number;
  }
}

function makeSentence(minWords, maxWords) {
  if (minWords < 0) minWords = 0;
  if (maxWords > 180) maxWords = 180;
  var s = HolderIpsum.words(chance.integer({min: minWords, max: maxWords}), true);

  for (var k = chance.integer({min: 60, max: 80}); k < s.length; k += chance.integer({min: 32, max: 100})) {
    s = replaceAt(s, k, '. ');
  }

  s = s.replace(' . ', '. ');

  var textArray = s.split('. ');
  for (var k = 0; k < textArray.length; k++){
    textArray[k] = capitalize(textArray[k]);
    textArray[k] = textArray[k].replace(/\./g, '')
  }

  s = textArray.join('. ');
  return s + '.';
}

function generateTitle() {
  return consistentValues.title;
}

function generateSubTitle() {
  return consistentValues.subTitle;
}

function generateDatePublished(display) {
  var rndMonth = doubleUp(consistentValues.month);
  var rndDay = doubleUp(consistentValues.day);
  if (rndMonth === 2 && rndDay > 28) rndDay = 28;

  if (display === 'USDate') {
    return rndMonth + '/' + rndDay + '/' + consistentValues.year;
  } else {
    return rndDay + '/' + rndMonth + '/' + consistentValues.year;
  }
}

function generateAuthor(type) {
  var author = '';

  if (type === 'username') {
    author = generateTwitterHandle();
  } else {
    author = generateFullName();
  }

  return author;
}

function generateSnippet() {
  return consistentValues.snippet;
}

function generateText() {
  // FIXME: fix newline output and wrapping
  return consistentValues.text;
}

function generateRating(outOf) {
  var rating = consistentValues.rating;

  if (outOf === '10') {
    rating = (rating * 2) + '/10';
  } else {
    rating = rating + '/5';
  }

  return rating;
}

function generateCommentAmount() {
  return consistentValues.comments + ' comments';
}

// Blog Posts

function generatePost() {
  return consistentValues.post;
}

function generateLikeAmount() {
  return consistentValues.likes + ' likes';
}

// Books

function generateDescription() {
  return consistentValues.description;
}

function generateYearPublished() {
  return consistentValues.year;
}

function generatePrice(currency) {
  if(currency === '$') {
    return currency + consistentValues.price;
  } else {
    return consistentValues.price + currency;
  }
}

function generateReviewAmount() {
  return consistentValues.comments + ' reviews';
}

// Comments

function generateTimePublished() {
  return doubleUp(consistentValues.hour*2) + ':' + doubleUp(consistentValues.minute);
}

function generateComment() {
  return consistentValues.comment;
}

// Files

function generateExtension(type) {
  if (type === 'img') {
    return consistentValues.imgExtension;
  } else if (type === 'code') {
    return consistentValues.codeExtension;
  } else {
    return consistentValues.extension;
  }
}

function generateFileName(options) {
  if (options === 'onlyName'){
    return consistentValues.fileName;
  }else{
    var type = '';

    schema.forEach(function(item) {
      var option = item.option || null;
      if (option === 'img') {
        type = 'img';
      } else if (option === 'code') {
        type = 'code';
      } else if (option === 'both') {
        type = '';
      }
    });

    return consistentValues.fileName + '.' + generateExtension(type);

  }
}

function generateDateCreated() {
  return generateDatePublished();
}

// newConsistentValues
function newConsistentValues() {
  function genGender() {
    var gender = 'both';

    schema.forEach(function(item) {
      var option = item.option || null;
      if (item.type === 'fullName') {
        gender = option;
      }
    });

    if (gender === 'both'){
      if (chance.integer({min: 0, max: 1}) === 0) {
        gender = 'male';
      } else {
        gender = 'female';
      }
    }

    return gender;
  }

  function genImageExtension() {
    var extension = '';

    var extensionOptions = ['png', 'jpeg', 'tiff', 'gif', 'bat', 'svg', 'ico'];
    return extensionOptions[chance.integer({min: 1, max: extensionOptions.length-1})];
  }

  function genCodeExtension() {
    var extension = '';

    var extensionOptions = ['html', 'css', 'scss', 'less', 'php', 'js', 'sql', 'json', 'csv', 'asp', 'cxx', 'c', 'hxx', 'java', 'jar', 'sh', 'xml'];
    return extensionOptions[chance.integer({min: 1, max: extensionOptions.length-1})];
  }

  function genExtension() {
    if (chance.integer({min: 0, max: 1}) === 0) {
      return genImageExtension();
    } else {
      return genCodeExtension();
    }
  }

  consistentValues.gender = genGender();
  consistentValues.fullName = chance.name({gender: consistentValues.gender});
  consistentValues.childAge = chance.integer({min: 1, max: 12});
  consistentValues.teenAge = chance.integer({min: 13, max: 17});
  consistentValues.adultAge = chance.integer({min: 18, max: 61});
  consistentValues.seniorAge = chance.integer({min: 62, max: 95});
  consistentValues.emailVerified = chance.bool({likelihood: 60});
  consistentValues.title = capitalize(HolderIpsum.words(chance.integer({min: 1, max: 5}), true));
  consistentValues.subTitle = capitalize(HolderIpsum.words(chance.integer({min: 5, max: 12}), true));
  consistentValues.description = capitalize(HolderIpsum.words(chance.integer({min: 20, max: 40}), true)) + '.';
  consistentValues.snippet = makeSentence(80, 100);
  consistentValues.text = makeSentence(150, 180) + ' ' + makeSentence(100, 180);
  consistentValues.post = makeSentence(70, 160);
  consistentValues.comment = makeSentence(10, 50);
  consistentValues.day = chance.integer({min: 1, max: 30});
  consistentValues.month = chance.integer({min: 1, max: 12});
  consistentValues.year = chance.integer({min: 2000, max: 2016});
  consistentValues.hour = chance.integer({min: 1, max: 12});
  consistentValues.minute = chance.integer({min: 0, max: 59});
  consistentValues.likes = chance.integer({min: 0, max: 230});
  consistentValues.comments = chance.integer({min: 0, max: 70});
  consistentValues.rating = chance.floating({min: 1, max: 5, fixed: 1});
  consistentValues.price = chance.integer({min: 3, max: 24}) + '.99';
  consistentValues.fileName = HolderIpsum.words(1, true);
  consistentValues.extension = genExtension();
  consistentValues.imgExtension = genImageExtension();
  consistentValues.codeExtension = genCodeExtension();
}

// Global Variables all output types
var codeFieldOutput = '';
var jsonOutput = '';
var csvOutput = '';

function Generator() {
  var generate = {
    // User
    fullName: generateFullName,
    firstName: generateFirstName,
    lastName: generateLastName,
    gender: generateGender,
    age: generateAge,
    username: generateUsername,
    email: generateEmail,
    emailVerified: generateEmailVerified,
    phone: generatePhoneNumber,
    twitterHandle: generateTwitterHandle,
    // Article
    title: generateTitle,
    subTitle: generateSubTitle,
    datePublished: generateDatePublished,
    author: generateAuthor,
    snippet: generateSnippet,
    text: generateText,
    rating: generateRating,
    comments: generateCommentAmount,
    // Blog Posts
    post: generatePost,
    likes: generateLikeAmount,
    // Books
    description: generateDescription,
    yearPublished: generateYearPublished,
    price: generatePrice,
    reviews: generateReviewAmount,
    // Comments
    timePublished: generateTimePublished,
    comment: generateComment,
    // Files
    name: generateFileName,
    extension: generateExtension,
    dateCreated: generateDateCreated
  };

  var tempArray = ["blank"];
  var objectNumber = generateOptions.amount
  var arrayNumber = 0;
  schema.forEach(function() {
    arrayNumber += 1;
  });

  for(var i = 0; i < objectNumber; i++){
    newConsistentValues();
    schema.forEach(function(item) {
      var option = item.option || null;
      var output = generate[item.type](option);
      tempArray.push(output);
    });
  }

  function tableOutput(schema) {

    function newLine(amount) {
      for(var i = 0; i < amount; i++){
        output += '<br />';
      }
    }

    var output = '';

    for (var i = 0; i < objectNumber; i++) {
      output += '<span class="pinkSpan">id: ' + i + '</span>'; // add ID
      newLine(1);
      if(schema[0]) {
        schema.forEach(function(item, index) {
          output += '<span>' + item.key + ':</span> ';
          var option = item.option || null;
          var uniqueI = i + 1;
          var uniqueIndex = index + 1;
          output += tempArray[uniqueI+uniqueIndex+(((arrayNumber-1)*i)-1)];
          newLine(1);
        });
      }
      newLine(1);
    }

    codeFieldOutput = output;

  }

	function JSONgenerator(schema) {
		var output = {};

		output[generateOptions.title] = [];
		var itemsOutput = output[generateOptions.title];

		for (var i = 0; i < objectNumber; i++) {
			var itemOut = {};
			itemOut.id = i;

      if (schema[0]) {
		    schema.forEach(function(item, index) {
				  var option = item.option || null;

          var uniqueI = i + 1;
          var uniqueIndex = index + 1;
          itemOut[item.key] = tempArray[uniqueI+uniqueIndex+(((arrayNumber-1)*i)-1)];
			  });
      }

			itemsOutput.push(itemOut);
		}

    jsonOutput = output;
	};

	function CSV(schema) {
    var output = '';

    function newLine() {
      output = output.slice(0, -1);
      output += '\n';
    }

    function addTitle(item) {
      output += item.key + ',';
    }

    addTitle({key: 'id'});

    if(schema [0]) {
      schema.forEach(addTitle);
    }

    newLine();

    for (var i = 0; i < objectNumber; i++) {
      output += i + ','; // add ID

      if(schema[0]) {
        schema.forEach(function(item, index) {
          var option = item.option || null;

          var uniqueI = i + 1;
          var uniqueIndex = index + 1;
          output += tempArray[uniqueI+uniqueIndex+(((arrayNumber-1)*i)-1)] + ',';
        });
      }
      newLine();
    }

    csvOutput = output;
  };

	tableOutput(schema);
  JSONgenerator(schema);
  CSV(schema);
}

function refresh() {
  Generator();
  els.codeField.innerHTML = codeFieldOutput;
}

function findAvailableKey(requested, number, index) {
  number = number || 0;
  var toCheck = number ? requested + number : requested;

  for (var i = schema.length; i--;) {
    if (i === index) continue;
    if (schema[i].key === toCheck) {
      number++;
      return findAvailableKey(requested, number, index);
    }
  }

  return toCheck;
}

function addValue(type) {
  uniqueHelper++;
  var options = valueOptions[type] || null;
  var value = {
    type: type,
    key: findAvailableKey(type)
  }
  if (options) { value.option = options.options[0].value; }

  schema.push(value);
  refresh();

  var t = '';
	t += '<section class="block">';
	t += '  <input type="text" class="node-name" maxlength="40" title="' + value.key + '" placeholder="' + value.key + '" value="' + value.key + '" disabled>';
  t += '  <ul class="block--tools">';
  t += '  <li><button class="edit">' + defaults.editIcon + '</button></li><li><button class="remove">' + defaults.removeIcon + '</button></li>';
  t += '  </ul>';

  if (options) {
    t += '  <div class="block--options">';
    t += '		<span class="eyebrow">' + options.title + '</span>';
    t += '		<ul class="radio-list">';

    options.options.forEach(function(option, index) {
      option.name = option.value + uniqueHelper;
      t += '			<li>';
      t += '				<input type="radio" name="' + value.key + '" id="' + option.name + '" value="' + option.value + '"';
      t += index === 0 ? ' checked>' : ' >'
      t += '<label for="' + option.name + '">' + option.title + '</label>'; // @timo, dont hate me for the spaces at the front being gone... there are reasons!
      t += '			</li>';
    });

    t += '		</ul>';
    t += '	</div>';
  }

  t += '</section>';

  els.valueWrapper.insertAdjacentHTML('beforeend', t);

}

function clear(option) {
  schema = [];
  els.valueWrapper.innerHTML = '';
  if(option === 'full') {
    addValue('fullName');
    generateOptions.amount = 2;
    els.objectNumber.value = 2;
    generateOptions.title = 'dummi-data';
    els.arrayName.value = 'dummi-data';
  }
}

function toKey(text) {
  return text
          .replace(/[^A-Za-z0-9\s_\-]+/g, '') // remove unwanted chars
          .replace(/\s(.)/g, function(match) { return match.toUpperCase() }) // camelCase
          .replace(/\s/g, ''); // remove excess whitespace;
}

els.arrayName.addEventListener('keyup', function() {
  var title = toKey(this.value);
  generateOptions.title = title;
  refresh();
});

els.objectNumber.addEventListener('keyup', function () {
  if (this.value === '') return false;
  var max = 500;
  var min = 1;

  var newValue = parseInt(this.value.replace(/[^0-9]+/g, ''), 10);
  newValue = newValue > max ? max : newValue;
  newValue = newValue < min ? min : newValue;

  this.value = newValue;
  generateOptions.amount = newValue;
  refresh();
});

els.valuePool.addEventListener('change', function() {
  var pool = valuePools[this.value];

  els.valueType.innerHTML = '';
  pool.forEach(function(type) {
    els.valueType.innerHTML += '<option value="' + type + '">' + type + '</option>';
  });
});

els.addValue.addEventListener('click', function() {
  var type = els.valueType.value;
  addValue(type);
});

// els.presetSelector.addEventListener('change', function() {
//   var preset = presets[this.value];

//   clear();

//   if (!preset) return refresh();

//   preset.forEach(function(type) {
//     addValue(type);
//   });
// });

function findParentContains(element, classNames, levels) {
  var parent = element.parentElement;

  for (var i = classNames.length; i--;) {
    if (parent.classList.contains(classNames[i])) {
      return parent;
    }
  }

  if (levels > 1) {
    return findParentContains(parent, classNames, levels - 1);
  } else {
    return false;
  }
};

els.valueWrapper.addEventListener('mousedown', function(e) {
  var target = e.target;
  var parentContains = findParentContains(target, ['edit'], 2);
  target = parentContains ? parentContains : target;

  // Prevent firing blur event already if target is edit button
  if (target.classList.contains('edit')) {
    e.preventDefault();
  }
});

els.valueWrapper.addEventListener('click', function(e) {
  var target = e.target;

  if (target.type === 'radio') {
    var block = target.parentElement // li
                .parentElement       // ul
                .parentElement       // .block--options
                .parentElement;      // .block
    var index = getIndex(this.children, block);

    schema[index].option = target.value;
    refresh();
  }

  var parentContains = findParentContains(target, ['remove', 'edit'], 2);
  target = parentContains ? parentContains : target;

  if (target.classList.contains('edit')) {
    var input = target.parentElement    // li
                .parentElement          // ul
                .previousElementSibling; // input

    if(input.disabled) {
      input.disabled = false;
      return input.focus();
    }
    return input.blur();
  }

  if (target.classList.contains('remove')) {
    var block = target.parentElement // li
                .parentElement       // ul
                .parentElement       // block
    var index = getIndex(this.children, block);
    schema.splice(index, 1);
    this.removeChild(block);

    return refresh();
  }

});

els.valueWrapper.addEventListener('focus', function(e) {
  var target = e.target;

  if (!target.classList.contains('node-name')) return;

  if (target.value === target.placeholder) {
    target.value = '';
  }
}, true);

function setKey(target) {
  var parent = target.parentElement;
  var index = getIndex(els.valueWrapper.children, parent);
  var newKey = toKey(target.value);
  newKey = findAvailableKey(newKey, 0, index);

  target.value = newKey;
  schema[index].key = newKey;
  refresh();

  var optionsUl = parent.querySelector('.radio-list');
  if (optionsUl) {
    var lis = optionsUl.children;
    forEach(lis, function(li) {
      li.firstElementChild.name = newKey;
    });
  }
};

els.valueWrapper.addEventListener('blur', function(e) {
  var target = e.target;
  if (!target.classList.contains('node-name')) return;

  target.disabled = true;

  if (target.value === '') {
    target.value = target.placeholder;
  }

  setKey(target);
}, true);

els.valueWrapper.addEventListener('keyup', function(e) {
  var target = e.target;

  if (!target.classList.contains('node-name')) return;

  if (e.keyCode === 13) {
    return target.blur();
  }
});

els.resetButton.addEventListener('click', function() {
  clear('full');
  refresh();
});

els.downloadJSON.addEventListener('click', function() {
  var data = jsonOutput;
  data = JSON.stringify(data, null, 2);
  var downloadable = 'data: text/json;charset=utf-8,' + encodeURIComponent(data);
  els.downloadJSON.setAttribute('href', downloadable);
  els.downloadJSON.setAttribute('download', generateOptions.title + '.' + 'json');
});

els.downloadCSV.addEventListener('click', function() {
  var data = csvOutput;
  var downloadable = 'data: text/csv;charset=utf-8,' + encodeURIComponent(data);
  els.downloadCSV.setAttribute('href', downloadable);
  els.downloadCSV.setAttribute('download', generateOptions.title + '.' + 'csv');
});

refresh();
